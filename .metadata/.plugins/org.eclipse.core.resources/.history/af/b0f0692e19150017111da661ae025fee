package com.test.util;

import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.openxmlformats.schemas.drawingml.x2006.chart.STScatterStyle;

import bsh.This;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.ResultSetMetaData;
import com.mysql.jdbc.Statement;
import com.test.bean.DBInfo;

public class ConnectToDB {
	
	private DBInfo dbInfo;
	private Connection conn = null;
	private Statement stmt = null;
	
	public ConnectToDB() {
		dbInfo = new DBInfo();
	}

	public DBInfo getDbInfo() {
		return dbInfo;
	}

	public void setDbInfo(DBInfo dbInfo) {
		this.dbInfo = dbInfo;
	}
	
	public void connect(){
		this.close();
		this.connectMySQL();
	}

	public synchronized void close() {
		try {
			if (stmt != null) {
				stmt.close();
				stmt = null;
			}
			if (conn != null) {
				conn.close();
				conn = null;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public synchronized void connectMySQL() {
		try {
			Class.forName(dbInfo.getDriver()).newInstance();
			conn = (Connection)DriverManager.getConnection("jdbc:mysql://"
					+dbInfo.getHost()+"/"+dbInfo.getDataBase()+"?useUnicode=true&characterEncoding=uft-8",
					dbInfo.getUser(),dbInfo.getPwd());
		} catch (InstantiationException e) {
			e.printStackTrace();
		}catch (IllegalAccessException e) {
			e.printStackTrace();
		}catch (ClassNotFoundException e) {
			e.printStackTrace();
		}catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	private void statement() {
		if (conn == null) {
			this.connectMySQL();
		}
		try {
			stmt = (Statement) conn.createStatement();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	private ResultSet resultSet(String sql) {
		ResultSet rs =null;
		if (stmt ==null) {
			this.statement();
		}
		try {
			rs = stmt.executeQuery(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return rs;
	}
	
	private void executeUpdate(String sql) {
		if (stmt == null) {
			this.statement();
		}
		try {
			stmt.executeUpdate(sql);
		} catch (SQLException e) {
			System.out.println(sql);
			e.printStackTrace();
		}
	}
	
	public List<Object> query(String tableInfo, String sql){
		List<Object> list = new ArrayList<Object>();
		ResultSet rs = this.resultSet(sql);
		try {
			ResultSetMetaData md = rs.getMetaData();
			int cc =md.getColumnCount();
			while (rs.next()) {
				Object object = this.getBeanInfo(tableInfo);
				for (int i = 1; i <= cc; i++) {
					String cn =md.getColumnName(i);
					this.reflectSetInfo(object,this.changeColumnToBean(cn,"set"),rs.getObject(cn));
				}
				list.add(object);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}
	
	public void insert(String table, Object object){
		String sql ="";
		try {
			this.getMetaData(table);
			ResultSetMetaData md = MetaData.metaData.get(table);
			
			int cc = md.getColumnCount();
			String insertColumn = "";
			String insertValue = "";
			for (int i = 2; i <= cc; i++) {
				String cn = md.getColumnName(i);
				Object gVlaue = this.reflectGetInfo(object,this.changeColumnToBean(cn,"get"));
				if (gVlaue.getClass().getSimpleName().equals("String")) {
					gVlaue = "\""+gVlaue+"\"";
				}
				if ("".equals(insertColumn)) {
					insertColumn += cn;
					insertValue += gVlaue;
				}else {
					insertColumn += ","+cn;
					insertValue += ","+gVlaue;
				}
				
				sql = "insert into "+ table +"(" + insertColumn + ") values (" +insertValue+")";
				this.executeUpdate(sql);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	private void getMetaData(String table) {
		if (! MetaData.metaData.containsKey(table)) {
			ResultSet rs = this.resultSet("select * from "+ table +" limit 0,1");
			try {
				MetaData.metaData.put(table, rs.getMetaData());
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
	}
	
}
