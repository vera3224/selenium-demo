package com.demo.test.utils;

import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.ITestContext;
import org.testng.ITestResult;

import com.thoughtworks.selenium.webdriven.commands.Refresh;
import com.thoughtworks.selenium.webdriven.commands.WaitForPageToLoad;

import bsh.commands.dir;

public class SeleniumUtil {
//	使用Log4j，第一步就是获取日志记录器，这个记录器将负责控制日志信息
	public static Logger logger = Logger.getLogger(SeleniumUtil.class.getName());
	public ITestResult it = null;
	public WebDriver driver = null;
	public WebDriver window = null;
	
//	启动浏览器
	public void launchBrowser(String browserName, ITestContext context, String webUrl, int timeOut) {
		SelectBrowser select = new SelectBrowser();
		driver = select.selectExplorerByName(browserName, context);
		try {
			maxWindow(browserName);
			WaitForPageLoading(timeOut);
			get(webUrl);
		} catch (TimeoutException e) {
			// TODO: handle exception
			logger.warn("注意：页面没有完全加载出来，刷新重试!!");
			refresh();
			JavascriptExecutor js = (JavascriptExecutor) driver;
			String status = (String) js.executeScript("return document.readyState");
			logger.info("打印状态:"+status);
		}
	}
	
	
	public void close() {
		driver.close();
	}
	
	public void refresh() {
		// TODO Auto-generated method stub
		driver.navigate().refresh();
		logger.info("页面刷新成功");
	}
	
	public void back() {
		driver.navigate().back();
		}
	public void forward() {
		driver.navigate().forward();
		}
	
	public void get(String url) {
	// TODO Auto-generated method stub
		driver.get(url);
		logger.info("打开测试页面:["+url+"]");
		}
	
	public void WaitForPageLoading(int pageLoadTime) {
	// TODO Auto-generated method stub
		driver.manage().timeouts().pageLoadTimeout(pageLoadTime, TimeUnit.SECONDS);
		}
	
	public void maxWindow(String browserName) {
	// TODO Auto-generated method stub
		logger.info("最大化浏览器"+browserName);
		driver.manage().window().maximize();
		}
	public void setBrowserSize(int width, int height) {
		driver.manage().window().setSize(new Dimension(width, height));
	}
	
	public WebElement findElement(By by) {
		return driver.findElement(by);
	}
	
	public List<WebElement>  findElementsBy(By by) {
		return driver.findElements(by);
	}

	public void click(By byElement) {
		try {
			clickTheClickable(byElement,System.currentTimeMillis(),2500);
		} catch (StaleElementReferenceException e) {
			// TODO: handle exception
			logger.error("The element you clicked:["+byElement+"] is no longer exist!");
			Assert.fail("The element you clicked:["+byElement+"] is no longer exist!");
		}catch (Exception e) {
			// TODO: handle exception
			logger.error("Failed to click element ["+byElement+"]");
		}
	}


	private void clickTheClickable(By byElement, long currentTimeMillis, int i) {
		// TODO Auto-generated method stub
		
	}
}
