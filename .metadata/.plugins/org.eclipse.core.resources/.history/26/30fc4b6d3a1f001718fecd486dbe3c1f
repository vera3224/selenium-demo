/**
 * 
 */
package com.demo.test.plugins.arrow;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.TestListenerAdapter;

/**
 * @author vera
 *2017年4月12日
 *netease_arrow 来自网易的截图插件
 */
public class TestResultListener extends TestListenerAdapter {
	private static Logger logger = Logger.getLogger(TestResultListener.class.getName());
	protected ITestContext testContext = null;//这是新加的
	String browser = null;
	
	@Override
	public void onStart(ITestContext testContext) {
//		这是新加的，用于对context进行统一
		this.testContext = testContext;
		browser = String.valueOf(testContext.getCurrentXmlTest().getParameter("browserName"));
		
		super.onStart(testContext);
	}
	
	@Override
	public void onTestFailure(ITestResult tr) {
		super.onTestFailure(tr);
		logger.warn(tr.getName()+"测试用例执行失败！");
		WebDriver webDriver = (WebDriver) testContext.getAttribute("SELENIUM_DRIVER");//这里是取driver
		saveScreenShot(tr,webDriver,browser);
	}
	
	@Override
	public void onTestSkipped(ITestResult tr) {
		super.onTestSkipped(tr);
		WebDriver webDriver = (WebDriver) testContext.getAttribute("SELENIUM_DRIVER");
		logger.warn(tr.getName()+" 测试用例由于某些原因被跳过！");
		saveScreenShot(tr, webDriver, browser);
	}

	
	@Override
	public void onTestSuccess(ITestResult tr) {
		super.onTestSuccess(tr);
		logger.info(tr.getName()+" 测试用例执行成功！");
	}
	
	@Override
	public void onTestStart(ITestResult tr) {
		super.onTestStart(tr);
		logger.info(tr.getName()+" 测试用例开始执行");
	}
	
	@Override
	public void onFinish(ITestContext testContext) {
		super.onFinish(testContext);
		
		// List of test results which we will delete later
		ArrayList<ITestResult> testsToBeRemoved = new ArrayList<ITestResult>();
		// collect all id's from passed test
		Set<Integer> passedTestIds = new HashSet<Integer>();
		for (ITestResult passedTest : testContext.getPassedTests().getAllResults()) {
			logger.info("执行成功的用例 = " + passedTest.getName());
			passedTestIds.add(getId(passedTest));
		}

		// Eliminate the repeat methods
		Set<Integer> skipTestIds = new HashSet<Integer>();
		for (ITestResult skipTest : testContext.getSkippedTests().getAllResults()) {
			logger.info("被跳过的用例 = " + skipTest.getName());
			// id = class + method + dataprovider
			int skipTestId = getId(skipTest);

			if (skipTestIds.contains(skipTestId) || passedTestIds.contains(skipTestId)) {
				testsToBeRemoved.add(skipTest);
			} else {
				skipTestIds.add(skipTestId);
			}
		}

		// Eliminate the repeat failed methods
		Set<Integer> failedTestIds = new HashSet<Integer>();
		for (ITestResult failedTest : testContext.getFailedTests().getAllResults()) {
			logger.info("执行失败的用例 = " + failedTest.getName());
			// id = class + method + dataprovider
			int failedTestId = getId(failedTest);

			// if we saw this test as a failed test before we mark as to be
			// deleted
			// or delete this failed test if there is at least one passed
			// version
			if (failedTestIds.contains(failedTestId) || passedTestIds.contains(failedTestId)
					|| skipTestIds.contains(failedTestId)) {
				testsToBeRemoved.add(failedTest);
			} else {
				failedTestIds.add(failedTestId);
			}
		}

		// finally delete all tests that are marked
		for (Iterator<ITestResult> iterator = testContext.getFailedTests().getAllResults().iterator(); 
				iterator.hasNext();) {
			ITestResult testResult = iterator.next();
			if (testsToBeRemoved.contains(testResult)) {
				logger.info("移除重复失败的用例: " + testResult.getName());
				iterator.remove();
			}
		}
	}
	
	
	private Integer getId(ITestResult passedTest) {
		// TODO Auto-generated method stub
		return null;
	}

	private void saveScreenShot(ITestResult tr, WebDriver webDriver, String browser) {
		// TODO Auto-generated method stub
		
	}

}
