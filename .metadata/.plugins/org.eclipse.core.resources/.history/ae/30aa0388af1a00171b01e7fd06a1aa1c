package com.demo.test.utils;

import java.util.Properties;

import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.ITestContext;


//在不同的平台上选择对应的浏览器，系统平台程序自动判断是什么平台
public class SelectBrowser {
	static Logger logger = Logger.getLogger(SelectBrowser.class.getName());

	public WebDriver selectExplorerByName(String browser,ITestContext contect){
		Properties props = System.getProperties();//获得系统属性集
		String currentPlatform = props.getProperty("os.name");//操作系统名称
		logger.info("当前操作系统是：["+currentPlatform+"]");
		logger.info("启动浏览器:["+browser+"]");
//		从testNG的配置文件中读取driverConfgFilePath的值
		String driverConfgFilePath = contect.getCurrentXmlTest().getParameter("driverConfgFilePath");
//		声明好驱动的路径
		String chromedriver_win = PropertiesDataProvider.getTestData(driverConfgFilePath, "chromedriver_win");
		String chromedriver_linux = PropertiesDataProvider.getTestData(driverConfgFilePath, "chromedriver_linux");
		String chromedriver_mac = PropertiesDataProvider.getTestData(driverConfgFilePath, "chromedriver_mac");
		String ghostdriver_win = PropertiesDataProvider.getTestData(driverConfgFilePath, "ghostdriver_win");
		String iedriver = PropertiesDataProvider.getTestData(driverConfgFilePath, "iedriver");
		
		if (currentPlatform.toLowerCase().contains("win")) {
			if (browser.equalsIgnoreCase("ie")) {
				System.setProperty("webdriver.ie.driver", iedriver);
				DesiredCapabilities ieCapabilities = DesiredCapabilities.internetExplorer();
				ieCapabilities.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);
				return new InternetExplorerDriver(ieCapabilities);
			}else if (browser.equalsIgnoreCase("chrome")) {
				System.setProperty("webdriver.chrome.driver", chromedriver_win);
				return new ChromeDriver();
			}else if (browser.equalsIgnoreCase("firefox")) {
				return new FirefoxDriver();
			}else if (browser.equalsIgnoreCase("ghost")) {
				DesiredCapabilities ghostCapabilities = new DesiredCapabilities();
				ghostCapabilities.setJavascriptEnabled(true);
				ghostCapabilities.setCapability(PhantomJSDriverService.PHANTOMJS_EXECUTABLE_PATH_PROPERTY, ghostdriver_win);
			}
		}
		
	}
}
